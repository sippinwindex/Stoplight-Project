/* js/components/TrafficLight.css */

/* Main container for positioning */
.traffic-light-container {
  display: flex;
  flex-direction: column; /* Stack stick and face vertically */
  align-items: center;
}

/* The pole */
.traffic-light-stick {
  width: 15px;
  height: 100px; /* Adjust height as needed */
  background-color: #555; /* Dark grey pole */
  border: 1px solid #333;
  box-shadow: inset 0 0 5px rgba(0,0,0,0.4);
}

/* The main housing for the lights */
.traffic-light-face {
  background-color: #3a3a3a; /* Retro dark grey/brown */
  padding: 20px 15px;
  border-radius: 15px; /* Rounded corners for retro feel */
  display: flex;
  flex-direction: column;
  gap: 15px; /* Space between lights */
  border: 3px solid #222;
  box-shadow:
    5px 5px 15px rgba(0, 0, 0, 0.5), /* Outer shadow */
    inset 0 0 10px rgba(0, 0, 0, 0.6); /* Inner shadow */
  width: 100px; /* Fixed width */
}

/* Base style for each light */
.light {
  width: 70px;  /* Size of the light circle */
  height: 70px;
  border-radius: 50%; /* Make it a circle */
  background-color: #1a1a1a; /* Dark, off state */
  border: 2px solid #111;
  cursor: pointer;
  position: relative; /* Needed for overlay and glow positioning */
  overflow: hidden; /* Keep scanlines inside */
  transition:
    background-color 0.3s ease,
    box-shadow 0.4s ease,
    transform 0.2s ease; /* Smooth transitions */
  box-shadow: inset 0 0 10px rgba(0,0,0,0.7); /* Inner shadow for depth */
}

/* CRT Scanline Overlay for Lights */
.light .scanline-overlay {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  background-image: repeating-linear-gradient(
      rgba(0, 0, 0, 0.4) 0,
      rgba(0, 0, 0, 0.4) 1px,
      transparent 1px,
      transparent 4px /* Adjust scanline density */
    );
  opacity: 0; /* Hidden by default */
  transition: opacity 0.3s ease;
  pointer-events: none; /* Don't interfere with clicks */
  z-index: 1;
}

/* Specific colors when inactive (optional, could just rely on the base .light style) */
.light.red { /* No special inactive style needed if background-color is dark enough */ }
.light.yellow { }
.light.green { }

/* --- Active State --- */
.light.red.active {
  background-color: #ff4136; /* Bright Red */
  box-shadow:
    0 0 20px 5px #ff4136, /* Outer glow */
    0 0 40px 10px rgba(255, 65, 54, 0.7), /* Wider glow */
    inset 0 0 15px rgba(0,0,0,0.5); /* Inner shadow */
  animation: pulseGlow 1.5s infinite ease-in-out;
}
.light.yellow.active {
  background-color: #ffdc00; /* Bright Yellow */
  box-shadow:
    0 0 20px 5px #ffdc00,
    0 0 40px 10px rgba(255, 220, 0, 0.7),
    inset 0 0 15px rgba(0,0,0,0.5);
  animation: pulseGlow 1.5s infinite ease-in-out;
}
.light.green.active {
  background-color: #2ecc40; /* Bright Green */
  box-shadow:
    0 0 20px 5px #2ecc40,
    0 0 40px 10px rgba(46, 204, 64, 0.7),
    inset 0 0 15px rgba(0,0,0,0.5);
  animation: pulseGlow 1.5s infinite ease-in-out;
}

/* Show scanlines when active */
.light.active .scanline-overlay {
  opacity: 0.6; /* Make scanlines visible */
}

/* --- Hover State --- */
.light:hover {
  transform: scale(1.05); /* Slightly enlarge on hover */
}

/* Add a subtle glow on hover *even if not active* */
.light:not(.active):hover {
   box-shadow:
    0 0 10px 2px rgba(255, 255, 255, 0.2), /* Faint white glow */
    inset 0 0 10px rgba(0,0,0,0.7);
}

/* Make hover glow more intense if already active */
.light.active:hover {
  box-shadow:
    0 0 25px 8px currentColor, /* Use the light's own color */
    0 0 50px 15px rgba(255, 255, 255, 0.3), /* Extra white boost */
    inset 0 0 15px rgba(0,0,0,0.5);
  transform: scale(1.08); /* Slightly larger scale on active hover */
}


/* Pulsating Glow Animation */
@keyframes pulseGlow {
  0% {
    box-shadow:
        0 0 20px 5px currentColor, /* Use color variable */
        0 0 40px 10px rgba(255, 255, 255, 0.3), /* White-ish base glow */
        inset 0 0 15px rgba(0,0,0,0.5);
  }
  50% {
    box-shadow:
        0 0 25px 8px currentColor,
        0 0 50px 15px rgba(255, 255, 255, 0.5),
        inset 0 0 15px rgba(0,0,0,0.5);
  }
  100% {
     box-shadow:
        0 0 20px 5px currentColor,
        0 0 40px 10px rgba(255, 255, 255, 0.3),
        inset 0 0 15px rgba(0,0,0,0.5);
  }
}

/* Apply the keyframe animation correctly using color names */
.light.red.active { animation-name: pulseGlowRed; }
.light.yellow.active { animation-name: pulseGlowYellow; }
.light.green.active { animation-name: pulseGlowGreen; }

/* Define specific keyframes if currentColor doesn't work as expected in complex shadows */
/* Or adjust the main pulseGlow to use variables if needed, but simple currentColor often works */
/* Example for red explicitly: */
@keyframes pulseGlowRed {
   0% { box-shadow: 0 0 20px 5px #ff4136, 0 0 40px 10px rgba(255, 65, 54, 0.7), inset 0 0 15px rgba(0,0,0,0.5); }
   50% { box-shadow: 0 0 25px 8px #ff4136, 0 0 50px 15px rgba(255, 65, 54, 0.8), inset 0 0 15px rgba(0,0,0,0.5); }
   100% { box-shadow: 0 0 20px 5px #ff4136, 0 0 40px 10px rgba(255, 65, 54, 0.7), inset 0 0 15px rgba(0,0,0,0.5); }
}
/* Add similar @keyframes for yellow and green if needed, replacing colors */
@keyframes pulseGlowYellow {
    0% { box-shadow: 0 0 20px 5px #ffdc00, 0 0 40px 10px rgba(255, 220, 0, 0.7), inset 0 0 15px rgba(0,0,0,0.5); }
    50% { box-shadow: 0 0 25px 8px #ffdc00, 0 0 50px 15px rgba(255, 220, 0, 0.8), inset 0 0 15px rgba(0,0,0,0.5); }
    100% { box-shadow: 0 0 20px 5px #ffdc00, 0 0 40px 10px rgba(255, 220, 0, 0.7), inset 0 0 15px rgba(0,0,0,0.5); }
}
@keyframes pulseGlowGreen {
    0% { box-shadow: 0 0 20px 5px #2ecc40, 0 0 40px 10px rgba(46, 204, 64, 0.7), inset 0 0 15px rgba(0,0,0,0.5); }
    50% { box-shadow: 0 0 25px 8px #2ecc40, 0 0 50px 15px rgba(46, 204, 64, 0.8), inset 0 0 15px rgba(0,0,0,0.5); }
    100% { box-shadow: 0 0 20px 5px #2ecc40, 0 0 40px 10px rgba(46, 204, 64, 0.7), inset 0 0 15px rgba(0,0,0,0.5); }
}

/* Assign the animation with infinite duration and timing */
.light.red.active { animation: pulseGlowRed 1.5s infinite ease-in-out; }
.light.yellow.active { animation: pulseGlowYellow 1.5s infinite ease-in-out; }
.light.green.active { animation: pulseGlowGreen 1.5s infinite ease-in-out; }